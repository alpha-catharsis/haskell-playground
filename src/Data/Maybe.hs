-- ----------------------------------------------------------------------------
-- Language Extensions
-- ----------------------------------------------------------------------------

{-# LANGUAGE NoImplicitPrelude #-}

-- ----------------------------------------------------------------------------
-- Module declaration
-- ----------------------------------------------------------------------------

module Data.Maybe
  (
    Maybe(..)
  ) where

-- ----------------------------------------------------------------------------
-- Internal imports
-- ----------------------------------------------------------------------------

import Functor.Applicative
import Functor.Covariant

-- ----------------------------------------------------------------------------
-- Maybe data type definition
-- ----------------------------------------------------------------------------

data Maybe a = Nothing | Just a

-- ----------------------------------------------------------------------------
-- Maybe instance for Covariant
-- ----------------------------------------------------------------------------

instance Covariant Maybe where
  fmap _ Nothing  = Nothing
  fmap f (Just x) = Just (f x)

-- ----------------------------------------------------------------------------
-- Maybe instance for Applicative
-- ----------------------------------------------------------------------------

instance Applicative Maybe where
  pure x = Just x
  Nothing  <*> _ = Nothing
  (Just f) <*> l = fmap f l
