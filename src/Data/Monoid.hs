-- ----------------------------------------------------------------------------
-- Language Extensions
-- ----------------------------------------------------------------------------

{-# LANGUAGE NoImplicitPrelude #-}

-- ----------------------------------------------------------------------------
-- Module declaration
-- ----------------------------------------------------------------------------

module Data.Monoid
  (
    Monoid(..)
  , mconcat
  ) where

-- ----------------------------------------------------------------------------
-- Internal imports
-- ----------------------------------------------------------------------------

import Data.Semigroup

-- ----------------------------------------------------------------------------
-- Monoid type class definition
-- ----------------------------------------------------------------------------

class Semigroup a => Monoid a where
  mempty :: a

-- ----------------------------------------------------------------------------
-- Monoid type class functions
-- ----------------------------------------------------------------------------

mconcat :: (Monoid a) => [a] -> a
mconcat = go mempty
  where go acc [] = acc
        go acc (x:xs) = go (acc <> x) xs

-- ----------------------------------------------------------------------------
-- List instance for Monoid
-- ----------------------------------------------------------------------------

instance Monoid [a] where
  mempty = []
