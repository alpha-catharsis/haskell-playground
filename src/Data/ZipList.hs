-- ----------------------------------------------------------------------------
-- Language Extensions
-- ----------------------------------------------------------------------------

{-# LANGUAGE NoImplicitPrelude #-}

-- ----------------------------------------------------------------------------
-- Module declaration
-- ----------------------------------------------------------------------------

module Data.ZipList
  (
    ZipList(..)
  ) where

-- ----------------------------------------------------------------------------
-- External imports
-- ----------------------------------------------------------------------------

import Data.Function (($))
import Data.List (zipWith)

-- ----------------------------------------------------------------------------
-- Internal imports
-- ----------------------------------------------------------------------------

import Functor.Applicative
import Functor.Covariant

-- ----------------------------------------------------------------------------
-- ZipList data type definition
-- ----------------------------------------------------------------------------

newtype ZipList a = ZipList { getZipList :: [a] }

-- ----------------------------------------------------------------------------
-- ZipList instance for Covariant
-- ----------------------------------------------------------------------------

instance Covariant ZipList where
  fmap f (ZipList xs)  = ZipList (fmap f xs)

-- ----------------------------------------------------------------------------
-- ZipList instance for Applicative
-- ----------------------------------------------------------------------------

instance Applicative ZipList where
  pure x = ZipList [x]
  ZipList fs <*> ZipList xs = ZipList (zipWith ($) fs xs)
