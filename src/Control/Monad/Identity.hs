-- ----------------------------------------------------------------------------
-- Language Extensions
-- ----------------------------------------------------------------------------

{-# LANGUAGE NoImplicitPrelude #-}

-- ----------------------------------------------------------------------------
-- Module declaration
-- ----------------------------------------------------------------------------

module Control.Monad.Identity
  (
    Identity(..)
  ) where

-- ----------------------------------------------------------------------------
-- Internal imports
-- ----------------------------------------------------------------------------

import Control.Monad
import Functor.Applicative
import Functor.Covariant

-- ----------------------------------------------------------------------------
-- Identity data type definition
-- ----------------------------------------------------------------------------

newtype Identity a = Identity a

-- ----------------------------------------------------------------------------
-- Identity instance for Covariant
-- ----------------------------------------------------------------------------

instance Covariant Identity where
  fmap f (Identity x) = Identity (f x)

-- ----------------------------------------------------------------------------
-- Identity instance for Applicative
-- ----------------------------------------------------------------------------

instance Applicative Identity where
  pure x = Identity x
  Identity f <*> l = fmap f l

-- ----------------------------------------------------------------------------
-- Identity instance for Monad
-- ----------------------------------------------------------------------------

instance Monad Identity where
  join (Identity (Identity x)) = Identity x
