-- ----------------------------------------------------------------------------
-- Language Extensions
-- ----------------------------------------------------------------------------

{-# LANGUAGE NoImplicitPrelude #-}

-- ----------------------------------------------------------------------------
-- Module declaration
-- ----------------------------------------------------------------------------

module Functor.Applicative
  (
    Applicative(..)
  ) where

-- ----------------------------------------------------------------------------
-- Internal imports
-- ----------------------------------------------------------------------------

import Functor.Covariant

-- ----------------------------------------------------------------------------
-- Applicative type class
-- ----------------------------------------------------------------------------

class Covariant f => Applicative f where
  pure :: a -> f a
  (<*>) :: f (a -> b) -> (f a -> f b)

-- ----------------------------------------------------------------------------
-- List instance for Applicative
-- ----------------------------------------------------------------------------

instance Applicative [] where
  pure x = [x]
  fs <*> xs = [f x | f <- fs, x <- xs]
