-- ----------------------------------------------------------------------------
-- Language Extensions
-- ----------------------------------------------------------------------------

{-# LANGUAGE NoImplicitPrelude #-}

-- ----------------------------------------------------------------------------
-- Module declaration
-- ----------------------------------------------------------------------------

module Control.Monad.Reader
  (
    Reader(..)
  , ask
  , asks
  , local
  ) where

-- ----------------------------------------------------------------------------
-- External imports
-- ----------------------------------------------------------------------------

import Prelude ((.), ($), const, id)

-- ----------------------------------------------------------------------------
-- Internal imports
-- ----------------------------------------------------------------------------

import Control.Monad
import Functor.Applicative
import Functor.Covariant

-- ----------------------------------------------------------------------------
-- Reader data type definition
-- ----------------------------------------------------------------------------

newtype Reader e a = Reader { runReader :: e -> a }

-- ----------------------------------------------------------------------------
-- Reader instance for Covariant
-- ----------------------------------------------------------------------------

instance Covariant (Reader e) where
  fmap f (Reader g) = Reader (f . g)

-- ----------------------------------------------------------------------------
-- Reader instance for Applicative
-- ----------------------------------------------------------------------------

instance Applicative (Reader e) where
  pure x = Reader (const x)
  Reader f <*> Reader g = Reader $ \x -> f x (g x)

-- ----------------------------------------------------------------------------
-- Reader instance for Monad
-- ----------------------------------------------------------------------------

instance Monad (Reader e) where
  join (Reader f) = Reader $ \x -> runReader (f x) x

-- ----------------------------------------------------------------------------
-- Reader monad functions
-- ----------------------------------------------------------------------------

ask :: Reader e e
ask = Reader id

asks :: (e -> a) -> Reader e a
asks = Reader

local :: (e -> e) -> Reader e a -> Reader e a
local f (Reader g) = Reader (g . f)

