-- ----------------------------------------------------------------------------
-- Language Extensions
-- ----------------------------------------------------------------------------

{-# LANGUAGE NoImplicitPrelude #-}

-- ----------------------------------------------------------------------------
-- Module declaration
-- ----------------------------------------------------------------------------

module Control.Monad
  (
    Monad(..)
  ) where

-- ----------------------------------------------------------------------------
-- External imports
-- ----------------------------------------------------------------------------

import Data.List (concat)

-- ----------------------------------------------------------------------------
-- Internal imports
-- ----------------------------------------------------------------------------

import Functor.Applicative
import Functor.Covariant

-- ----------------------------------------------------------------------------
-- Monad type class
-- ----------------------------------------------------------------------------

class Applicative m => Monad m where
  join :: m (m a) -> m a
  (>>=) :: (a -> m b) -> (m a -> m b)
  f >>= mx = join (fmap f mx)

-- ----------------------------------------------------------------------------
-- List instance for Monad
-- ----------------------------------------------------------------------------

instance Monad [] where
  join = concat
