-- ----------------------------------------------------------------------------
-- Language Extensions
-- ----------------------------------------------------------------------------

{-# LANGUAGE NoImplicitPrelude #-}

-- ----------------------------------------------------------------------------
-- Module declaration
-- ----------------------------------------------------------------------------

module Data.Semigroup
  (
    Semigroup(..)
  , stimes
  ) where

-- ----------------------------------------------------------------------------
-- Expternal imports
-- ----------------------------------------------------------------------------

import Prelude ((-), (++), Integral, toInteger)

-- ----------------------------------------------------------------------------
-- Semigroup type class definition
-- ----------------------------------------------------------------------------

infixr 6 <>

class Semigroup a where
  (<>) :: a -> a -> a

-- ----------------------------------------------------------------------------
-- Semigroup type class functions
-- ----------------------------------------------------------------------------

stimes :: (Semigroup a, Integral b) => b -> a -> a
stimes n x = go (toInteger n - 1) x
  where go 0 acc = acc
        go i acc = go (i-1) (acc <> x)

-- ----------------------------------------------------------------------------
-- List instance for Semigroup
-- ----------------------------------------------------------------------------

instance Semigroup [a] where
  (<>) = (++)
